generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String   @default("User")
  role      String   @default("user")
  createdAt DateTime @default(now())
}

model Language {
  id          Int           @id @default(autoincrement())
  code        String        @unique
  name        String
  createdAt   DateTime      @default(now())
  Translation Translation[] @relation("LanguageTranslations")

  @@index([code])
}

model Label {
  id           Int           @id @default(autoincrement())
  name         String // Naziv etikete
  translations Translation[] @relation("LabelTranslations")
  categories   Category[]    @relation("CategoryToLabel")
  createdAt    DateTime      @default(now())
  states       State[]       @relation("StateToLabel")
  counties     County[]      @relation("CountyToLabel")
  cities       City[]        @relation("CityToLabel")
  suburbs      Suburb[]

  @@index([name])
}

model Translation {
  id          Int       @id @default(autoincrement())
  labelId     Int
  Label       Label     @relation("LabelTranslations", fields: [labelId], references: [id], onDelete: Cascade)
  languageId  Int
  Language    Language  @relation("LanguageTranslations", fields: [languageId], references: [id], onDelete: Cascade)
  translation String
  description String? // New field for category description in each language
  synonyms    Synonym[] // Ensure this matches the TypeScript code
  createdAt   DateTime  @default(now())

  @@unique([labelId, languageId]) // Composite unique constraint
}

model State {
  id        Int      @id @default(autoincrement())
  labelId   Int
  label     Label    @relation("StateToLabel", fields: [labelId], references: [id], onDelete: Cascade)
  counties  County[]
  createdAt DateTime @default(now())

  retailStores RetailStore[]
  iconId       Int?
  icon         Icon?         @relation(fields: [iconId], references: [id])
  Location     Location[]
  Advertising  Advertising[]
}

model County {
  id        Int      @id @default(autoincrement())
  labelId   Int
  label     Label    @relation("CountyToLabel", fields: [labelId], references: [id], onDelete: Cascade)
  postCode  String?
  stateId   Int
  state     State    @relation(fields: [stateId], references: [id], onDelete: Cascade)
  cities    City[]
  createdAt DateTime @default(now())

  retailStores RetailStore[]

  iconId      Int?
  icon        Icon?         @relation(fields: [iconId], references: [id])
  Location    Location[]
  Advertising Advertising[]
}

model City {
  id        Int      @id @default(autoincrement())
  labelId   Int
  label     Label    @relation("CityToLabel", fields: [labelId], references: [id], onDelete: Cascade)
  postCode  String?
  countyId  Int
  county    County   @relation(fields: [countyId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  retailStores RetailStore[]

  iconId      Int?
  icon        Icon?         @relation(fields: [iconId], references: [id])
  suburbs     Suburb[]
  Location    Location[]
  Advertising Advertising[]
}

model Suburb {
  id        Int      @id @default(autoincrement())
  name      String
  cityId    Int
  city      City     @relation(fields: [cityId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  retailStores RetailStore[]

  iconId      Int?
  icon        Icon?         @relation(fields: [iconId], references: [id])
  labelId     Int
  label       Label         @relation(fields: [labelId], references: [id])
  Location    Location[]
  Advertising Advertising[]
}

model ParentCategory {
  parentId Int
  childId  Int

  parent Category @relation("Parent", fields: [parentId], references: [id], onDelete: Cascade)
  child  Category @relation("Child", fields: [childId], references: [id], onDelete: Cascade)

  @@id([parentId, childId])
}

model RelatedCategory {
  categoryId Int
  relatedId  Int
  category   Category @relation("CategoryRelated", fields: [categoryId], references: [id], onDelete: Cascade)
  related    Category @relation("RelatedToCategory", fields: [relatedId], references: [id], onDelete: Cascade)

  @@id([categoryId, relatedId])
}

model Icon {
  id        Int        @id @default(autoincrement())
  name      String
  folder    String     @default("articles")
  url       String
  createdAt DateTime   @default(now())
  Category  Category[]
  State     State[]
  County    County[]
  City      City[]
  Suburb    Suburb[]

  @@unique([name, folder])
}

model Synonym {
  id            Int         @id @default(autoincrement())
  translationId Int
  Translation   Translation @relation(fields: [translationId], references: [id], onDelete: Cascade)
  synonym       String
  createdAt     DateTime    @default(now())

  @@index([translationId])
}

model Category {
  id                Int               @id @default(autoincrement())
  labelId           Int
  iconId            Int?
  icon              Icon?             @relation(fields: [iconId], references: [id])
  label             Label             @relation("CategoryToLabel", fields: [labelId], references: [id])
  parentCategories  ParentCategory[]  @relation("Parent")
  childCategories   ParentCategory[]  @relation("Child")
  relatedCategories RelatedCategory[] @relation("CategoryRelated")
  relatedTo         RelatedCategory[] @relation("RelatedToCategory")

  articleRetailStores    RetailStore[] @relation("RetailStoreArticleCategories")
  activityRetailStores   RetailStore[] @relation("RetailStoreActivityCategories")
  objectTypeRetailStores RetailStore[] @relation("RetailStoreObjectTypeCategories")

  createdAt              DateTime      @default(now())
  advertisingId          Int?
  articleAdvertisings    Advertising[] @relation("AdvertisingArticleCategories")
  activityAdvertisings   Advertising[] @relation("AdvertisingActivityCategories")
  objectTypeAdvertisings Advertising[] @relation("AdvertisingObjectTypeCategories")
}

model RetailStore {
  id               Int      @id @default(autoincrement())
  name             String
  phoneNumber      String?
  email            String?
  website          String?
  viewCount        Int      @default(0)
  isPhoneConfirmed Boolean  @default(false)
  isEmailConfirmed Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  address          String?  @default("Somborski put 79")

  stateId Int
  state   State @relation(fields: [stateId], references: [id], onDelete: Cascade)

  countyId Int?
  county   County? @relation(fields: [countyId], references: [id], onDelete: Cascade)

  cityId Int?
  city   City? @relation(fields: [cityId], references: [id], onDelete: Cascade)

  suburbId Int?
  suburb   Suburb? @relation(fields: [suburbId], references: [id], onDelete: Cascade)

  coordinatesId Int?
  coordinates   Coordinates? @relation(fields: [coordinatesId], references: [id], onDelete: Cascade)

  articleCategories    Category[] @relation("RetailStoreArticleCategories")
  activityCategories   Category[] @relation("RetailStoreActivityCategories")
  objectTypeCategories Category[] @relation("RetailStoreObjectTypeCategories")

  Location    Location?     @relation(fields: [locationId], references: [id])
  locationId  Int?
  Advertising Advertising[]
  Images      Image[]
}

model Location {
  id          Int           @id @default(autoincrement())
  stateId     Int
  state       State         @relation(fields: [stateId], references: [id], onDelete: Cascade)
  countyId    Int?
  county      County?       @relation(fields: [countyId], references: [id], onDelete: Cascade)
  cityId      Int?
  city        City?         @relation(fields: [cityId], references: [id], onDelete: Cascade)
  suburbId    Int?
  suburb      Suburb?       @relation(fields: [suburbId], references: [id], onDelete: Cascade)
  address     String?
  RetailStore RetailStore[]

  @@index([stateId, countyId, cityId, suburbId])
}

model Coordinates {
  id                  Int           @id @default(autoincrement())
  latitude            Float
  longitude           Float
  locationDescription String?
  RetailStore         RetailStore[]

  @@unique([latitude, longitude])
}

model Advertising {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  viewCount   Int      @default(0)
  adType      String
  url         String? // URL for the ad if it's a link
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  validTo     DateTime

  articleCategories    Category[] @relation("AdvertisingArticleCategories")
  activityCategories   Category[] @relation("AdvertisingActivityCategories")
  objectTypeCategories Category[] @relation("AdvertisingObjectTypeCategories")

  stateId Int
  state   State? @relation(fields: [stateId], references: [id], onDelete: Cascade)

  countyId Int?
  county   County? @relation(fields: [countyId], references: [id], onDelete: Cascade)

  cityId Int?
  city   City? @relation(fields: [cityId], references: [id], onDelete: Cascade)

  suburbId Int?
  suburb   Suburb? @relation(fields: [suburbId], references: [id], onDelete: Cascade)

  retailStoreId Int?
  RetailStore   RetailStore? @relation(fields: [retailStoreId], references: [id])
  Image         Image?       @relation(fields: [imageId], references: [id])
  imageId       Int?
}

model Image {
  id            Int           @id @default(autoincrement())
  name          String
  url           String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  advertising   Advertising[]
  RetailStore   RetailStore?  @relation(fields: [retailStoreId], references: [id])
  retailStoreId Int?
}
