generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  role      String   @default("user")
  createdAt DateTime @default(now())
}

model Data {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  createdAt DateTime @default(now())
}

model MapMarker {
  id          String   @id @default(uuid())
  position    Json
  title       String
  description String
  locationId  String
  location    Location @relation(fields: [locationId], references: [id])
}

model Location {
  id      String      @id @default(uuid())
  address String
  city    String
  phone   String?
  website String?
  markers MapMarker[]
}

model Language {
  id          Int           @id @default(autoincrement())
  code        String        @unique
  name        String
  createdAt   DateTime      @default(now())
  Translation Translation[] @relation("LanguageTranslations")

  @@index([code])
}

model Category {
  id               Int              @id @default(autoincrement())
  labelId          Int
  iconId           Int?
  icon             Icon?            @relation(fields: [iconId], references: [id])
  createdAt        DateTime         @default(now())
  parentCategories ParentCategory[] @relation("Parent")
  childCategories  ParentCategory[] @relation("Child")
}

model ParentCategory {
  parentId Int
  childId  Int

  parent Category @relation("Parent", fields: [parentId], references: [id], onDelete: Cascade)
  child  Category @relation("Child", fields: [childId], references: [id], onDelete: Cascade)

  @@id([parentId, childId]) // Composite primary key to ensure unique parent-child pairs
}

model Label {
  id           Int           @id @default(autoincrement())
  name         String // Assuming name should always be present
  translations Translation[] @relation("LabelTranslations")
  createdAt    DateTime      @default(now())

  @@index([name])
}

model Icon {
  id        Int        @id @default(autoincrement())
  name      String
  url       String // e.g., 'icon.png'
  createdAt DateTime   @default(now())
  Category  Category[]

  @@index([name])
}

model Translation {
  id          Int       @id @default(autoincrement())
  labelId     Int
  Label       Label     @relation("LabelTranslations", fields: [labelId], references: [id], onDelete: Cascade)
  languageId  Int
  Language    Language  @relation("LanguageTranslations", fields: [languageId], references: [id], onDelete: Cascade)
  translation String
  description String? // New field for category description in each language
  synonyms    Synonym[] // Ensure this matches the TypeScript code
  createdAt   DateTime  @default(now())

  @@unique([labelId, languageId]) // Composite unique constraint
}

model Synonym {
  id            Int         @id @default(autoincrement())
  translationId Int
  Translation   Translation @relation(fields: [translationId], references: [id], onDelete: Cascade)
  synonym       String
  createdAt     DateTime    @default(now())

  @@index([translationId])
}
