generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  role      String   @default("user")
  createdAt DateTime @default(now())
}

model Language {
  id          Int           @id @default(autoincrement())
  code        String        @unique
  name        String
  createdAt   DateTime      @default(now())
  Translation Translation[] @relation("LanguageTranslations")

  @@index([code])
}

model Label {
  id           Int           @id @default(autoincrement())
  name         String // Naziv etikete
  translations Translation[] @relation("LabelTranslations")
  categories   Category[]    @relation("CategoryToLabel")
  createdAt    DateTime      @default(now())
  countries    Country[]     @relation("CountryToLabel")
  cities       City[]        @relation("CityToLabel")
  cityParts    CityPart[]    @relation("CityPartToLabel")
  Marketplace  Marketplace[]

  @@index([name])
}

model Translation {
  id          Int       @id @default(autoincrement())
  labelId     Int
  Label       Label     @relation("LabelTranslations", fields: [labelId], references: [id], onDelete: Cascade)
  languageId  Int
  Language    Language  @relation("LanguageTranslations", fields: [languageId], references: [id], onDelete: Cascade)
  translation String
  description String? // New field for category description in each language
  synonyms    Synonym[] // Ensure this matches the TypeScript code
  createdAt   DateTime  @default(now())

  @@unique([labelId, languageId]) // Composite unique constraint
}

model Country {
  id        Int      @id @default(autoincrement())
  labelId   Int
  label     Label    @relation("CountryToLabel", fields: [labelId], references: [id], onDelete: Cascade)
  cities    City[]
  createdAt DateTime @default(now())

  iconId      Int? // Foreign key for Icon
  icon        Icon?         @relation(fields: [iconId], references: [id]) // Optional relation with Icon
  RetailStore RetailStore[]
}

model City {
  id        Int        @id @default(autoincrement())
  labelId   Int
  label     Label      @relation("CityToLabel", fields: [labelId], references: [id], onDelete: Cascade)
  postCode  String?
  countryId Int
  country   Country    @relation(fields: [countryId], references: [id], onDelete: Cascade)
  cityParts CityPart[] // This should be the correct field name
  createdAt DateTime   @default(now())

  iconId      Int? // Foreign key for Icon
  icon        Icon?         @relation(fields: [iconId], references: [id]) // Optional relation with Icon
  RetailStore RetailStore[]

  @@unique([labelId, countryId])
}

model CityPart {
  id        Int      @id @default(autoincrement())
  labelId   Int
  label     Label    @relation("CityPartToLabel", fields: [labelId], references: [id], onDelete: Cascade)
  postCode  String?
  cityId    Int
  city      City     @relation(fields: [cityId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  iconId       Int? // Foreign key for Icon
  icon         Icon?         @relation(fields: [iconId], references: [id]) // Optional relation with Icon
  marketplaces Marketplace[] // This should be defined here as well
  RetailStore  RetailStore[]

  @@unique([labelId, cityId])
}

model Marketplace {
  id         Int      @id @default(autoincrement())
  name       String // Name of the marketplace
  address    String // Address of the marketplace
  cityPartId Int // Foreign key to CityPart
  cityPart   CityPart @relation(fields: [cityPartId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())

  iconId      Int? // Optional foreign key for Icon
  icon        Icon?         @relation(fields: [iconId], references: [id]) // Relation with Icon
  labelId     Int // Required foreign key for Label
  label       Label         @relation(fields: [labelId], references: [id]) // Relation with Label
  RetailStore RetailStore[]

  @@index([name]) // Optional index for marketplace name
}

model Category {
  id                Int               @id @default(autoincrement())
  labelId           Int
  iconId            Int?
  icon              Icon?             @relation(fields: [iconId], references: [id])
  label             Label             @relation("CategoryToLabel", fields: [labelId], references: [id])
  parentCategories  ParentCategory[]  @relation("Parent")
  childCategories   ParentCategory[]  @relation("Child")
  relatedCategories RelatedCategory[] @relation("CategoryRelated") // Related categories
  relatedTo         RelatedCategory[] @relation("RelatedToCategory") // Reverse relation for related categories
  retailStores      RetailStore[]     @relation("RetailStoreCategories")
  createdAt         DateTime          @default(now())
}

model ParentCategory {
  parentId Int
  childId  Int

  parent Category @relation("Parent", fields: [parentId], references: [id], onDelete: Cascade)
  child  Category @relation("Child", fields: [childId], references: [id], onDelete: Cascade)

  @@id([parentId, childId]) // Composite primary key to ensure unique parent-child pairs
}

model RelatedCategory {
  categoryId Int
  relatedId  Int
  category   Category @relation("CategoryRelated", fields: [categoryId], references: [id], onDelete: Cascade)
  related    Category @relation("RelatedToCategory", fields: [relatedId], references: [id], onDelete: Cascade)

  @@id([categoryId, relatedId]) // Composite key to ensure unique relations
}

model Icon {
  id          Int           @id @default(autoincrement())
  name        String
  url         String // e.g., 'icon.png'
  createdAt   DateTime      @default(now())
  Category    Category[] // Relations with Categories (if needed)
  Country     Country[] // Relation with Country
  City        City[] // Relation with City
  CityPart    CityPart[] // Relation with CityPart
  Marketplace Marketplace[]

  @@index([name])
}

model Synonym {
  id            Int         @id @default(autoincrement())
  translationId Int
  Translation   Translation @relation(fields: [translationId], references: [id], onDelete: Cascade)
  synonym       String
  createdAt     DateTime    @default(now())

  @@index([translationId])
}

model Company {
  id                Int      @id @default(autoincrement())
  name              String
  businessActivity  String
  countryFounded    String
  cityFounded       String
  responsiblePerson String
  email             String   @unique
  website           String?
  aboutCompany      String?
  logo              String? // Store path or URL of the logo image
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  retailStores RetailStore[]
}

model RetailStore {
  id            Int           @id @default(autoincrement())
  name          String
  storeTypeId   Int?
  storeType     StoreType?    @relation(fields: [storeTypeId], references: [id], onDelete: SetNull)
  addressId     Int
  address       Address       @relation(fields: [addressId], references: [id], onDelete: Cascade)
  phoneNumber   String
  email         String?
  homeDelivery  HomeDelivery
  images        Image[]
  companyId     Int
  company       Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  countryId     Int
  country       Country       @relation(fields: [countryId], references: [id], onDelete: Cascade)
  cityId        Int
  city          City          @relation(fields: [cityId], references: [id], onDelete: Cascade)
  cityPartId    Int?
  cityPart      CityPart?     @relation(fields: [cityPartId], references: [id], onDelete: Cascade)
  marketplaceId Int?
  marketplace   Marketplace?  @relation(fields: [marketplaceId], references: [id], onDelete: Cascade)
  categories    Category[]    @relation("RetailStoreCategories")
  workingTimes  WorkingTime[]
  viewCount     Int           @default(0) // Tracks number of views
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@index([name])
}

model StoreType {
  id     Int           @id @default(autoincrement())
  type   String        @unique
  stores RetailStore[]
}

enum HomeDelivery {
  Yes
  No
  Conditional
}

model Address {
  id                 Int           @id @default(autoincrement())
  streetAddress      String
  addressDescription String?
  latitude           Float
  longitude          Float
  retailStores       RetailStore[]
}

model Image {
  id          Int          @id @default(autoincrement())
  url         String
  description String?
  storeId     Int?
  store       RetailStore? @relation(fields: [storeId], references: [id])
  createdAt   DateTime     @default(now())
}

model WorkingTime {
  id            Int         @id @default(autoincrement())
  dayOfWeek     String // e.g., Monday, Tuesday
  openingTime   String // e.g., 09:00
  closingTime   String // e.g., 17:00
  retailStoreId Int
  retailStore   RetailStore @relation(fields: [retailStoreId], references: [id], onDelete: Cascade)
}
